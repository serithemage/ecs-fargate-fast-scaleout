@startuml ecs-fargate-scaling-flow
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/Compute/ElasticContainerService.puml
!include AWSPuml/ManagementGovernance/CloudWatch.puml
!include AWSPuml/ManagementGovernance/AutoScaling.puml
!include AWSPuml/ApplicationIntegration/SimpleNotificationService.puml

' Styling
skinparam backgroundColor #FAFAFA
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60
skinparam sequenceParticipant underline

title ECS Fargate 고속 스케일링 플로우

participant "Application\nContainer" as app
participant "CloudWatch\nMetrics" as cw
participant "CloudWatch\nAlarms" as alarm
participant "Auto Scaling\nPolicy" as as
participant "ECS Service" as ecs
participant "SNS Topic" as sns

autonumber

== 메트릭 수집 (5초마다) ==
app -> cw : PutMetricData\n(RequestsPerSecond)
note right
  **고해상도 메트릭**
  StorageResolution: 1초
  Namespace: FastScaling/Application
end note

app -> cw : PutMetricData\n(ResponseTime, Connections)

== 알람 평가 (10초마다) ==
cw -> alarm : 메트릭 평가
note right
  **알람 조건**
  RPS > 100 for 1 datapoint
  Evaluation Period: 10초
end note

alt RPS > 100
  alarm -> as : 알람 상태: ALARM
  alarm -> sns : 알람 알림 전송
  
  == 스케일아웃 실행 ==
  as -> ecs : UpdateService\n(DesiredCount++)
  note right
    **Step Scaling**
    100-150 RPS: +1 Task
    150-200 RPS: +2 Tasks
    200+ RPS: +4 Tasks
  end note
  
  ecs -> ecs : 새 태스크 시작
  note left
    **Fargate 시작 시간**
    약 30초 소요
  end note
  
  ecs --> app : 새 컨테이너 실행
  
else RPS < 50 (3분 연속)
  alarm -> as : 알람 상태: OK
  
  == 스케일인 실행 ==
  as -> ecs : UpdateService\n(DesiredCount--)
  note right
    **보수적 축소**
    Cooldown: 5분
    -1 Task씩 감소
  end note
  
  ecs -> app : 컨테이너 종료
end

== 피드백 루프 ==
app -> cw : 지속적인 메트릭 발행
cw -> alarm : 지속적인 평가

@enduml