@startuml ecs-fargate-fast-scaling-architecture
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/Compute/ElasticContainerService.puml
!include AWSPuml/Compute/Fargate.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancingApplicationLoadBalancer.puml
!include AWSPuml/ManagementGovernance/CloudWatch.puml
!include AWSPuml/ManagementGovernance/AutoScaling.puml
!include AWSPuml/Groups/AWSCloud.puml
!include AWSPuml/Groups/VPC.puml
!include AWSPuml/Groups/PrivateSubnet.puml
!include AWSPuml/Groups/PublicSubnet.puml
!include AWSPuml/General/Users.puml

' Styling
skinparam backgroundColor #FAFAFA
skinparam handwritten false
skinparam defaultFontName Arial
skinparam defaultFontSize 14
skinparam ArrowThickness 2
skinparam ArrowColor #FF9900
skinparam ActorBorderColor #232F3E
skinparam LifeLineBorderColor #232F3E
skinparam ParticipantBorderColor #232F3E
skinparam ParticipantBackgroundColor #FFFFFF
skinparam BoxBorderColor #232F3E

title ECS Fargate 고속 스케일링 아키텍처

' Users
Users(users, "사용자", "대량 트래픽 발생")

AWSCloudGroup(aws) {
  VPCGroup(vpc, "VPC (10.0.0.0/16)") {
    PublicSubnetGroup(public_subnets, "퍼블릭 서브넷") {
      ElasticLoadBalancingApplicationLoadBalancer(alb, "Application Load Balancer", "5초 헬스체크")
    }
    
    PrivateSubnetGroup(private_subnets, "프라이빗 서브넷") {
      ElasticContainerService(ecs_cluster, "ECS 클러스터", "Container Insights 활성화")
      
      together {
        Fargate(task1, "Fargate Task 1", "256 CPU / 512 MB")
        Fargate(task2, "Fargate Task 2", "256 CPU / 512 MB")
        Fargate(task3, "Fargate Task N...", "Auto Scaling")
      }
    }
  }
  
  ' Monitoring and Scaling
  CloudWatch(cloudwatch, "CloudWatch", "고해상도 메트릭")
  CloudWatch(alarms, "CloudWatch Alarms", "10초 평가 주기")
  AutoScaling(autoscaling, "Auto Scaling", "Step Scaling 정책")
}

' Traffic Flow
users --> alb : HTTPS 요청
alb --> task1 : 트래픽 분산
alb --> task2 : 트래픽 분산
alb --> task3 : 트래픽 분산

' Metrics Flow
task1 ..> cloudwatch : 5초 간격\n커스텀 메트릭
task2 ..> cloudwatch : 5초 간격\n커스텀 메트릭
task3 ..> cloudwatch : 5초 간격\n커스텀 메트릭

' Scaling Flow
cloudwatch --> alarms : 메트릭 평가
alarms --> autoscaling : RPS > 100\n알람 트리거
autoscaling --> ecs_cluster : 스케일링 명령

' Service Management
ecs_cluster ..> task1 : 관리
ecs_cluster ..> task2 : 관리
ecs_cluster ..> task3 : 생성/삭제

' Notes
note right of cloudwatch
  **커스텀 메트릭**
  • RequestsPerSecond
  • AverageResponseTime
  • ActiveConnections
end note

note right of autoscaling
  **스케일링 정책**
  • Scale-out: 0-10초
  • Scale-in: 30초+
  • Min Tasks: 2
  • Max Tasks: 100
end note

note bottom of alb
  **헬스체크 설정**
  • Interval: 5초
  • Threshold: 2회
  • Timeout: 4초
end note

@enduml